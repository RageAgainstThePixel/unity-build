name: 'Unity Build Pipeline Utility'
description: 'Runs a Unity build action using the specified arguments'
branding:
  icon: 'box'
  color: 'blue'

inputs:
  build-target:
    description: 'The build target to build for.'
    # Unity -buildTarget command line args https://docs.unity3d.com/Manual/CommandLineArguments.html
    # StandaloneWindows64, WSAPlayer, StandaloneOSX, iOS, StandaloneLinux64, Android, Lumin, WebGL
    default: ''
  test:
    description: 'Run editor tests'
    required: false
    default: 'true'
  additional-test-args:
    description: 'Additional args to pass to test command'
    required: false
    default: ''
  additional-build-args:
    description: 'Additional args to pass to build command'
    required: false
    default: ''
  publish-artifacts:
    description: 'Should the workflow publish artifacts?'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - uses: xrtk/unity-action@v6
      name: Project Validation
      with:
        log-name: 'project-validation'
        args: '-quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject'

    - uses: xrtk/unity-action@v6
      if: ${{ inputs.test == 'true' }}
      name: '${{ inputs.build-target }}-Tests'
      with:
        log-name: '${{ inputs.build-target }}-Tests'
        build-target: '${{ inputs.build-target }}'
        args: '-nographics -batchmode -runEditorTests ${{ inputs.additional-test-args }}'

    - uses: xrtk/unity-action@v6
      name: '${{ inputs.build-target }}-Build'
      with:
        log-name: '${{ inputs.build-target }}-Build'
        build-target: '${{ inputs.build-target }}'
        args: '-quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild ${{ inputs.additional-build-args }}'

    - name: Ensure Unity process is dead
      if: always()
      run: |
        $processIdFile = Join-Path $env:GITHUB_WORKSPACE "unity-process-id.txt"

        if (Test-Path $processIdFile) {
          $processId = Get-Content $processIdFile
          Write-Host "::debug::Unity Process ID found: $processId"
          $unityProcess = Get-Process -Id $processId -ErrorAction SilentlyContinue
          if ($unityProcess -and !$unityProcess.HasExited) {
            Write-Host "::debug::Killing Unity process with PID $processId"
            Stop-Process -Id $processId -Force
          }
        }
      shell: pwsh

    - uses: josStorer/get-current-time@v2.0.2
      if: ${{ always() && inputs.publish-artifacts == 'true' }}
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss

    - uses: actions/upload-artifact@v4
      name: Upload Artifacts
      if: ${{ always() && inputs.publish-artifacts == 'true' }}
      with:
        name: '${{ runner.os }}-${{ inputs.build-target }}-Artifacts-${{ github.run_number }}.${{ github.run_attempt }}-${{ steps.current-time.outputs.formattedTime }}'
        path: |
          ${{ env.UNITY_PROJECT_PATH }}/**/*.log
          ${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/
          !${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/*_BackUpThisFolder_ButDontShipItWithYourGame/**
          !${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/*_BurstDebugInformation_DoNotShip/**

    - name: Clean Artifacts
      if: ${{ always() }}
      run: |
        $artifacts = "${{ env.UNITY_PROJECT_PATH }}/Builds"
        Write-Host "Cleaning build artifacts path: $artifacts"

        if (Test-Path -Path $artifacts) {
          try {
            Remove-Item $artifacts -Recurse -Force
          } catch {
            Write-Warning "Failed to delete artifacts folder: $_"
          }
        } else {
          Write-Warning "Artifacts folder not found."
        }
      shell: pwsh
